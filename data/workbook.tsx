export const Data = [
  {
    category: "SoftwareDesign",
    problem:
      "소프트웨어 수명 주기 모형 중 포포수 모형에 대한 설명으로 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "적용사례가많다",
      "단계별 정의가 분명하다",
      "단계별 산출물이 명확하다",
      "요구사항의 변경이 용이하다.",
    ],
    solution: "4",
    memo: "폭포수모형은 이전 단계로 가기 힘듬",
  },
  {
    category: "SoftwareDesign",
    problem: "나선형 모형에 대한 설명으로 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "여럽 번의 개발 과정을 거쳐 점진적으로 완벽한 소프트웨어를 개발한다.",
      "대규모 시스템의 소프트웨어 개발에 적합하다.",
      "위험성 평가에 크게 의존하기 때문에 이를 발견하지 않으면 문제가 발생할 수 있다.",
      "실제 개발될 소프트웨어에 대한 시제품을 만들어 최종 결과물을 예측하는 모형이다.",
    ],
    solution: "4",
    memo:
      "실제 개발될 소프트웨어에 대한 프로토타입을 만드는것은 프로토타입모형이다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 애자일 프로세스 모델이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "XP(eXtreme Programming)",
      "ASD(adaptive Software Development)",
      "스크럼(Scrum)",
      "SM(Spiral Model)",
    ],
    solution: "4",
    memo: "SM은 전통적인 개발모델이다.",
  },
  {
    category: "SoftwareDesign",
    problem: "애자일 선언문에 대한 설명으로 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "계획에 따르기보다는 변화에 대응하는 것에 더 가치를 둔다.",
      "방대한 문서보다 제대로 실행되는 소프트웨어에 더 가치를 둔다.",
      "프로세서와 도구보다 개인과 그들의 협업에 더 가치를 둔다.",
      "고객과의 협력보다는 계약 협상에 더 가치를 둔다.",
    ],
    solution: "4",
    memo: "애자일은 계약협약보다는 고객과의 협력에 더 가치를 둡니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 설명하는 프로세스는 무엇인가?",
    problem2: [
      "팀원들이 스스로 팀을 구성하며, 개발 작업의 모든 것을 스스로 해결할 수 있어야 한다.",
      "개발에 필요한 요구사항에 우선순위를 부여한 제품기능 목록을 작성한다.",
      "개발 주기를 의미하는 스프린트는 2~4주 정도의 기간으로 진행한다.",
      "스프린트 회고를 통해 스프린트 동안 발생한 문제점을 파악하고 이에 대한 해결방안을 모색한다.",
    ],
    view: [
      "익스트림 프로그래밍(XP)",
      "크리스털(Crystal)",
      "칸반(Kanban)",
      "스크럼(Scrum)",
    ],
    solution: "4",
    memo:
      "스프린트,제품기능목록,스프린트 회고는 스크럼 프로세스 모델에서 사용합니다.",
  },
  {
    category: "SoftwareDesign",
    problem:
      "스크럼의 팀 구성 요소 중 이해관계자들의 의견을 종합하여 백로그를 작성하는 주체는 누구인가?",
    problem2: ["", "", "", ""],
    view: [
      "스크럼 마스터(SM)",
      "제품책임자(PO)",
      "고객(Customer)",
      "개발팀(DT)",
    ],
    solution: "2",
    memo: "백로그는 제품에 대한 요구사항 입니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 스크럼 개발 과정을 진행 순서에 맞게 올바르게 나열한 것은?",
    problem2: [
      "ㄱ.스프린트",
      "ㄴ.스프린트 회고",
      "ㄷ.일일 스크럼 회의",
      "ㄹ.스프린트 검토 회의",
      "ㅁ.스프린트 계획 회의",
    ],
    view: [
      "ㅁ->ㄷ->ㄱ->ㄴ->ㄹ",
      "ㅁ->ㄱ->ㄷ->ㄹ->ㄴ",
      "ㅁ->ㄷ->ㄱ->ㄹ->ㄴ",
      "ㅁ->ㄹ->ㄱ->ㄴ->ㄷ",
    ],
    solution: "2",
    memo:
      "게획한 내용을 토대로 일정 기간동안 스프린트를 수행하면서 진행 상황을 매일 점검하고 하나의 스프린트가 끝나면 검토한 후 진행을 돌아봅니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "익스트림 프로그래밍 테스트에 대한 설명으로 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "테스트는 최종 완제품을 고객에게 전달하기 바로 전에 수행한다.",
      "각 사용자 스토리에 대해 테스트 케이스를 작성한다.",
      "실제 코드를 작성하기 전에 테스트 케이스를 우선작성한다.",
      "자동화된 테스팅 도구 사용을 권장한다.",
    ],
    solution: "1",
    memo:
      "XP의 특징 중 하나는 짧은 개발주기를 반복하여 그때마다 만들어진 제품을 테스트하여 새로이 발생되는 요구 사항을 적극 반영하는 것입니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 익스트림프로그래밍에 대한 설명으로 옳지 않은 것은?",
    problem2: [
      "테스트 이후 새로운 요구사항이 작성되거나 요구사항의 상대적 우선순위가 변경될 수 있다.",
      "고객의 요구사항에 좀 더 유연하게 대응할 수 있도록 릴리즈 규모를 크게 한다.",
      "하나의 릴리즈를 더 세분화 한 단위를 이터레이션 이라고 한다.",
      "모든 개발자들이 전체 코드에 대한 공동 책임을 가지며 개발자 누구든지 어떤 코드라도 변경할 수 있다.",
    ],
    view: ["", "", "", ""],
    solution: "2",
    memo:
      "고객의 요구사항에 좀 더 유연하게 대응하려면 릴리즈로 확인하는 기능이 좀 더 세분화 되어야 한다.",
  },
  {
    category: "SoftwareDesign",
    problem:
      "애자일 방법 중에 제일 많이 알려진 것이 익스트림 프로그래밍 인데 다음중 XP와 가장 연관성이 적은것은?",
    problem2: ["", "", "", ""],
    view: [
      "Whole Team",
      "Large Releases",
      "Pair Programming",
      "Continuous Integration",
    ],
    solution: "2",
    memo: "XP의 주요 실천 방법중 하나는 릴리즈 기간을 짧게 반복하는 것입니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "익스트림 프로그래밍의 5가지 핵심 가치에 속하지 않는 것은?",
    problem2: ["", "", "", ""],
    view: ["의사소통", "단순성", "용기", "효율성"],
    solution: "4",
    memo: "XP의 핵심 5가지 가치는 의사소통,단순성,용기,존중,피드백 입니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 현행 시스템 파악 과정에 대한 설명으로 잘못된 것은?",
    problem2: ["", "", "", ""],
    view: [
      "시스템 구성은 조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술한다.",
      "소프트웨어 구성을 파악할 때 상용 소프트웨어의 경우 라이선스 적용 방식의 기준과 보유한 라이선스의 파악이 중요하다.",
      "아키텍처 구성을 파악할 때는 단위 업무 시스템 간에 주고 받는 데이터의 종류,형식,프로토콜,연계 유형,주기 등을 명시한다.",
      "네트워크 구성을 파악하면 서버들의 물리적인 위치 관계를 파악할 수 있고 보안취약성을 분석하여 이에 대한 적절한 대응을 할 수 있다.",
    ],
    solution: "3",
    memo:
      "아키텍처 구성은 기간 업무 수행에 어떠한 기술 요소가 사용되었는지 최상위 기준에서 계층별로 표현한 것입니다. 보기내용은 시스템 인터페이스 파악시 기술할 내용입니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 현행 시스템 파악 과정에 속하지 않는 것은?",
    problem2: ["", "", "", ""],
    view: [
      "시스템 구성 파악",
      "시스템 인터페이스 파악",
      "네트워크 구성 파악",
      "업무에 따른 사무실 배치 파악",
    ],
    solution: "4",
    memo: "시스템과 거리가 먼 것을 찾아보세요",
  },
  {
    category: "SoftwareDesign",
    problem: "운영체제에 대한 설명으로 잘못된 것은?",
    problem2: ["", "", "", ""],
    view: [
      "사용자가 컴퓨터를 편리하고 효과적으로 사용 할 수 있도록 환경을 제공한다.",
      "컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스로서 동적하는 일종의 하드웨어 장치이다.",
      "다른 응용 프로그램이 유용한 작업을 할 수 잇도록 환경을 제공한다.",
      "종류에는 windwos,unix,linux,ios 등이 있다.",
    ],
    solution: "2",
    memo: "운영체제는 소프트웨어",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 데이터베이스 관리 시스템이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: ["orcle", "mysql", "micosoft sql server", "android"],
    solution: "4",
    memo: "모바일 운영체제임",
  },
  {
    category: "SoftwareDesign",
    problem: "요구 사항 식별시 고려사항 중 가용성과 관련된 내용이 아닌것은?",
    problem2: ["", "", "", ""],
    view: [
      "시스템의 장시간 운영으로 인해 발생할 수 있는 고유의 장애 발생 가능성",
      "DBMS의 결함 등으로 인한 패치 설치를 위한 재가동",
      "WAS 이중화 지원",
      "설치할 응용 프로그램의 라이선스 정책 및 비용",
    ],
    solution: "4",
    memo:
      "가용성이란 프로그램이 주어진 시점에서 요구상에 따라 운영될 수 있는 능력을 말합니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "병원 진료 관리 시스템의 기능적 요구사항으로 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "담당의사는 자신이 담당한 환자의 진료 내용을 입력 또는 수정한다.",
      "환자 정보 관리자는 환자의 정보를 등록,삭제할 수 있다.",
      "환자는 자신이 진료한 내역을 조회할 수 있다.",
      "시스템 장애로 인한 정지시간이 한달에 한시간을 넘지 않아야된다.",
    ],
    solution: "4",
    memo: "비기능적 요구사항임",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음은 호텔 예약시스템의 요구사항을 나열한 것이다. 기능적 요구사항에 대한 설명으로 가장 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "예약 시 고객의 정보를 입력하는 방법을 결정해야 한다.",
      "영수증과 예약 확인서에 어떤 정보를 표시할지 결정해야 한다.",
      "예약 대행 여행사와 고객이 호텔정보 데이터베이스에 접근할 때 어떤 정보를 얻을 수 있는지 결정해야 한다.",
      "해외 분점 호텔의 고객 정보까지 관리하기 위해 시스템을 확장 할 수있도록 설계해야한다.",
    ],
    solution: "4",
    memo: "확장성,가용성,보안성,호환성,신뢰성은 비기능 요구사항에 해당합니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "요구분석 단계를 순서대로 바르게 나열한 것은?",
    problem2: [
      "가.요구사항검증",
      "나.요구사항 명세화",
      "다.타당성 조사",
      "라.요구사항 추출 및 분석",
    ],
    view: [
      "다->라->가->나",
      "라->다->나->가",
      "라->가->다->나",
      "다->라->나->가",
    ],
    solution: "4",
    memo:
      "개발에 대한 타당성이 충족되면 작성된 요구사항을 분석하여 정리한 후 검증하는 과저을 진행합니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "비기능적 요구사항에 대한 설명으로 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "예산의 범위,조직의비전,상호 호환성,보안성,안전성과 같은 사용자의 필요에 의해 발생한다",
      "시스템이 제공하는 서비스의 품질에 관한 것이다.",
      "시스템에서 제공되는 서비스나 기능에 대한 제약 사항에 관한 것이다.",
      "시스템이 특정 입력에 대해 어떻게 반응하는지,사용자의 요구에대해 시스템이 어떻게 동작해야 하는지에 관한 사항이다.",
    ],
    solution: "4",
    memo: "4번은 기능요구사항 입니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 요구사항 분석 기법이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: ["요구사항 분류", "개념 모델링", "정형 분석", "요구사항 제거"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "요구사항 기법중 다음이 설명하는 것은 무엇인가?",
    problem2: [
      "구문과 의미를 갖는 정형화된 언어를 이용해 요구사항을 수학적 기호로 표현한 후 이를 분석하는 과정이다.",
      "요구사항 분석의 마지막 단계에서 이루어진다.",
      "",
      "",
    ],
    view: ["요구사항 분류", "요구사항 협상", "정형분석", "개념모델링"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "요구사항 분석 기법중 개념 모델링에 대한 설명이 아닌것은?",
    problem2: ["", "", "", ""],
    view: [
      "개념 모델은 소프트웨어 요구사항 분석의 핵심이다.",
      "요구사항을 이해하는 이해관계자별로 다른 의견이 도출되지 않도록 하나의 통일된 개념 모델로 표현한다.",
      "개념 모델은 문제의 주체인 개체들과 그들간의 관계 및 종속성을 반영한다.",
      "모델링 표기는 주로 UML을 사용한다.",
    ],
    solution: "2",
    memo:
      "개념모델 종류는 유스케이스다이어그램,데이터흐름모델,상태모델 등이있다.이렇게 다양한이유는 이해관계자별로 관점이 다르기 때문",
  },
  {
    category: "SoftwareDesign",
    problem: "요구사항 확인에 대한 설명으로 잘못된 것은?",
    problem2: ["", "", "", ""],
    view: [
      "요구사항 확인 기법은 요굿항 개발 과정을 거쳐 문서화된 요구사항 관련 내용을 확인하고 검증하는 방법이다.",
      "일반적으로 요구사항 관리 도구를 이용하여 요구사항 정의 문서들에 대해 형상관리를 수행한다.",
      "요구사항 문서는 이해관계자들이 검토해야 한다.",
      "요구사항에 자원이 배정된 후에 문제 파악을 위한 검증을수행한다.",
    ],
    solution: "4",
    memo: "요구사항에 대한 분석과 확인이 완료된후에 자원을 배정합니다.",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 요구사항 확인 기법이 아닌것은?",
    problem2: ["", "", "", ""],
    view: ["요구사항 검토", "정형분석", "모델검증", "인수테스트"],
    solution: "2",
    memo: "정형분석은 요구사항 분석기법이다.",
  },
  {
    category: "SoftwareDesign",
    problem: "요구사항 확인 기법 중 하나인 프로토타이핑의 장점이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "빠르게 제작할 수 있으며,반복되는 제작을 통해 발전된 결과물을 얻을 수 있다.",
      "이해하기 쉬워 사용자와 개발자 또는 개발자 사이의 의사소통이 원활해진다.",
      "지속적이고 반복적인 프로토타입의 개선으로 인해 비용이 증가한다.",
      "프로토타입이 개선될수록 변동 가능한 요구사항들이 감속한다.",
    ],
    solution: "3",
    memo: "",
  },
];

export const TotalData = [
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 생명 주기 모델 중 아래 보기가 설명하는 모형은?",
    problem2: [
      "a.고객과 의사소통을 통해 계획 수립과 위험분석,구축,고객 평가의 과정을 거쳐 소프트웨어를 개발한다.",
      "b.가장 큰 장점인 위험 분석 단계에서 기술과 관리의 위험요소들을 하나씩 제거해 나감으로써 완성도 높은 소프트웨어를 만들 수 있다.",
      "c.반복적인 작업을 수행하는 점증적 생명 주기 모델이다",
      "d.비용이 많이 들거나 시간이 많이 소요되는 대구모 프로젝트나 큰 시스템을 구축할 때 유리하다.",
    ],
    view: ["프로토타입 모델", "폭포수 모델", "나선형 모델", "RAD모델"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 공학 패러다임에 해당하지 않은 것은?",
    problem2: ["", "", "", ""],
    view: ["폭포수 모형", "프로토타입 모형", "나선형 모형", "3세대 기법"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 공학에서 가장 폭넓게 사용되고 있는 모형은?",
    problem2: ["", "", "", ""],
    view: ["폭포수모형", "프로토타입 모형", "나선형 모형", "4세대 기법"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 소프트웨어 개발 모형이 가장 적절하게 선택된 경우는?",
    problem2: ["", "", "", ""],
    view: [
      "구축하고자 하는 시스템의 요구사항이 불분명하여 프로토타입 모형을 선택하였다.",
      "개발 중에도 고객의 요구사항에 맞게 수정 작업을 할 수 있도록 폭포수모형을 선택하였다.",
      "위험 분석을 통해 점증적으로 시스템을 개발할 수 있도록 폭포수 모형을 선택하였다.",
      "응용 분야가 단순하고 설치 시점에서 제품 설명서가 요구됨에 따라 나선형 모델을 선택하였다.",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "프로토타입 모델 개발 방법이 가장 적절하게 적용될 수 있는 경우는?",
    problem2: ["", "", "", ""],
    view: [
      "테스트 작업이 중요하지 않을 경우",
      "고객이 빠른시간 내에 개발의 완료를 요구할 경우",
      "구축하고자 하는 시스템의 요구사항이 불명확한 경우",
      "고객이 개발 과정에는 참여하지 않고자 하는 경우",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "고전적 생명 주기 모델에 프로토타입 모형의 장점과 위험 분석 기능을 추가한 패러다임은?",
    problem2: ["", "", "", ""],
    view: ["폭포수 모델", "나선형 모델", "잭슨 모델", "4GT"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "소프트웨어 생명 주기 모형중 Spiral Model에 대한 설명으로 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "대규모 시스템에 적합하다",
      "초기에 위험 요소를 발견하지 못할 경우 위험요소를 제거하기 위해 많은 비용이 소모될수 있다",
      "소프트웨어를 개발하면서 발생할 수 있는 위험을 관리하고 최소화하는 것을 목적으로한다.",
      "소프트웨어 개발 과정의 앞 단계가 끝나야만 다음 단계로 넘어 갈 수있는 선형 순차적 모형이다.",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "소프트웨어 생명 주기 모형 중 프로토 타입 모형의 가장 큰 장점이라고 볼 수 있는것은?",
    problem2: ["", "", "", ""],
    view: [
      "개발 비용의 절감",
      "4세대 언어의 적용",
      "개발 단계의 명확성",
      "요구사항의 정확한 파악",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 개발 모형 중 나선형 모델의 활동 과정이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: ["계획 및 정의", "위험 분석", "개발 ", "유지 보수"],
    solution: "4",
    memo: "계획및정의->위험분석->공학적개발->고객평가",
  },
  {
    category: "SoftwareDesign",
    problem:
      "여러번의 개발 과정을 거쳐 완벽한 최종 소프트웨어를 개발하는 점진적 모형으로 보행이 제안한 소프트웨어 생명주기 모델은? ",
    problem2: ["", "", "", ""],
    view: ["4GT", "나선형", "폭포수", "프로토타입"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "소프트웨어 공학의 전통적인 개발 방법인 선형 순차 모형의 순서를 옳게 나열한 것은?",
    problem2: ["", "", "", ""],
    view: [
      "구현-분석-설계-테스트-유지보수",
      "유지보수-테스트-분석-설계-구현",
      "분석-설계-구현-테스트-유지보수",
      "테스트-설계-유지보수-구현-분석",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "폭포수 모델에 대한 설명으로 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "소프트웨어 개발 과정의 각 단계가 순차적으로 진행된다.",
      "앞 단계에서 발견하지 못한 오류를 다음 단계에서 발견했을 때 오류 수정이 용이하다.",
      "두 개 이상의 과정이 병행 수행되거나 이전 단계로 넘어가는 경우가 거의없다.",
      "개발 과정중에 발생하는 새로운 요구나 경험을 설계에 반영하기 힘들다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음의 특징에 맞는 개발 접근 방식은?",
    problem2: [
      "유용한 소프트웨어를 빠르고 지속적으로 제공하여 고객을 만족시킨다.",
      "개발 막바지에도 요구사항 변경을 환영한다.",
      "같은 사무실에서 얼울글 맞대고 의견을 나눈다.",
      "동기가 부여된 개발자로 팀을 구성하고 신뢰하고 개발환경을 제공하고 지원한다.",
    ],
    view: [
      "컴포넌트 기반 개발",
      "정보 공학 개발",
      "애자일 프로그래밍",
      "객체 지향 개발",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "폭포수 모형과 애자일을 비교 했을 때 애자일의 특징이 아닌것은?",
    problem2: ["", "", "", ""],
    view: [
      "새로운 요구사항의 반영이 쉽다.",
      "개발에 있어 계획보다는 고객을 중심으로 한다.",
      "개발이 완료되면 최종적으로 모든 기능을 테스트한다.",
      "지속적으로 고객과 의사소통을 수행한다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 스크럼에 대한 설명으로 잘못된 것은?",
    problem2: ["", "", "", ""],
    view: [
      "제품 개발에 필요한 모든 요구사항을 우선순위에 따라 나열한 제품 백로그를 사용한다.",
      "소멸 차트를 통해 작업의 진행 상황을 확인할 수 있다.",
      "스프린트 검토 회의에서 개선할 사항에 대한 피드백이 정리되면 스크럼 마스터는 이를 다음 스프린트에 반영 할 수 있도록 제품 백로그를 업데이트 한다.",
      "스프린트 동안 진행될 작업들을 개발자 별로 합당할 때는 개발자들이 자신에게 맞는 작업을 스스로 선별하여 담당할 수 있도록 하는 것이 좋다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음에 제시된 XP의 개발 프로세스를 순서대로 맞게 나열한 것은?",
    problem2: [
      "ㄱ.주기",
      "ㄴ.승인 검사",
      "ㄷ.릴리즈 계획 수립",
      "ㄹ.소규모 릴리즈",
    ],
    view: ["ㄱ-ㄴ-ㄷ-ㄹ", "ㄴ-ㄷ-ㄹ-ㄱ", "ㄷ-ㄴ-ㄱ-ㄹ", "ㄷ-ㄱ-ㄴ-ㄹ"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 오픈 소스 사용에 따른 고려사항에 속하지 않는 것은?",
    problem2: ["", "", "", ""],
    view: [
      "라이선스의 종류",
      "사용자 수",
      "기술의 지속 가능성",
      "라이선스의 비용",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "사용자 요구사항 추출 방법중 시스템 수행 결과를 설명하기 위해 종이에 화면 순서를 기술하여 고객과 사용자에게 보여주는 것과 관련된것은?",
    problem2: ["", "", "", ""],
    view: ["인터뷰", "설문", "브레인스토밍", "프로토타이핑"],
    solution: "",
    memo: "4",
  },
  {
    category: "SoftwareDesign",
    problem: "요구분석에 대한 설명으로 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "고객이나 개발자 누구나 알 수 있는 내용은 요구사항에서 생략하여도 무방하다.",
      "요구사항은 소프트웨어를 개발하고 검증하는 기반이된다.",
      "요구사항은 명확하고 구체적이며 검증이 가능해야 한다.",
      "요구사항은 크게 기능적인 요구사항과 비기능적 요구사항으로 분류된다.",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음은 서점 시스템의 요구사항에 대한 내용이다 비기능 요구사항에 대한 설명은?",
    problem2: ["", "", "", ""],
    view: [
      "사용자는 로그인 또는 비로그인을 통해 책을 구매할 수 있어야한다.",
      "사용자가 책을 현금으로 구매하였을 경우 현금 영수증처리를 할 수 있어야한다.",
      "동시에 100명 이상이 주문을 요청해도 처리 할 수잇어야한다.",
      "사용자가 마이페이지에 저장해 놓은 도서목록은 일정 기간동안 그대로 저장되어 있어야한다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "요구사항 협상은 요구사항이 서로 충돌하는 경우 이를 적절히 해결하는 과정이다. 다음 중 요구사항이 서로 충돌되어 적절한 기준점을 찾아 합의해야하는 경우가 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "두명의 이해관계자가 요구하는 요구사항이 서로 충돌되는 경우",
      "요구사항이 서로 우선순위가 다른 경우",
      "요구사항과 자원이 서로 충돌되는 경우",
      "기능 요구사항과 비기능 요구사항이 서로 충돌되는경우",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "객체지향 개발 방법론 UML의 관계 표기법중 의존을 표현하는 기호는?",
    problem2: ["", "", "", ""],
    view: ["――――――――", "-------->", "--------▷", "――――――――▷"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "UML의 다이어그램에서 관계를 완성하고자 한다. 다음 관계의 표현으로 가장 적합한 것은?",
    problem2: [
      "애완동물",
      "강아지――――――――▷애완동물",
      "고양이――――――――▷애완동물",
      "햄스터――――――――▷애완동물",
    ],
    view: ["연관관계", "일반화관계", "집단화관계", "의존관계"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "사용자 인터페이스 설계 시 고려 사항으로 가장 거리가 먼 것은?",
    problem2: ["", "", "", ""],
    view: ["가시성", "다양성", "단순성", "일관성"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "사용자 인터페이스를 설정할 때 고려 사항이 아닌것은?",
    problem2: ["", "", "", ""],
    view: [
      "누가 보더라도 이해할 수 잇도록 직관성을 제공한다.",
      "사용자의 목적을 정확하게 달성할 수 있도록 유효성을 제공한다.",
      "사용자의 요구사항을 최대한 수용하고 오류를 최소화 할 수 있도록 유연성을 제공한다.",
      "버튼이나 조작 방법등을 사용자가 쉽게 습득할 수 있도록 다양성을 제공한다.",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음중 내비게이션에 대한 설명으로 틀린 것은?",
    problem2: ["", "", "", ""],
    view: [
      "웹 콘텐츠를 분류하고 체계화 시킨 후 이들을 연결 시켜 방문자로 하여금 웹사이트를 이용할 수 있게 하는 체계를 말한다.",
      "아이콘이나 그래픽 등을 일관성 있게 사용하여 홈페이지를 사용하는 사용자가 어디서라도 필요한 정보를 쉽게 찾을 수 있도록 하는 것이다.",
      "원하는 정보를 쉽게 찾을 수 있도록 시스템 위주로 설계되어야 한다.",
      "사이트의 이동 경로나 방법,이동을 돕는 구조와 인터페이스 등을 모두 포함하는 개념이다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 웹 콘텐츠 접근성을 높이기 위한 고려사항이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "모든 콘텐츠는 사용자가 그내용을 이해할 수 있도록 비선형 구조로 작성되어야한다.",
      "사용자가 맥락을 이해할 수 있도록 논리적인 순서를 제공해야한다.",
      "사용자가 의도하지 않은 기능은 실행되지 않도록 해야한다.",
      "사용자의 실수로 오류가 발생할 경우 이를 정정할 수 있는 방법을 제공해야한다.",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음 중 정부기관의 홈페이지 구축시 반영해야 할 지침으로 가장 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "스크립트 비사용자를 위한 대체 정보를 제공해야한다.",
      "호환성이 보장되지 않은 플러그인의 사용은 지양한다.",
      "웹사이트에서 제공하는 미디어는 특정 운영체제에서 종속적인 포멧을 사용해야한다.",
      "다양한 인터페이스로 웹사이트를 이용할수 있어야 한다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 웹사이트의 내비게이션 요소가 아닌 것은?",
    problem2: ["", "", "", ""],
    view: ["디렉터리", "메뉴", "템플릿", "사이트맵"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음중 화면 단위로 삽입될 구성 요소나 콘텐츠 기능 등을 구체적으로 정리해 놓은 문서는 무엇인가?",
    problem2: ["", "", "", ""],
    view: ["레이아웃", "내비게이션", "스토리보드", "동영상"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음중 사요자 인터페이스의 설계 도구에 대한 설명으로 틀린것은?",
    problem2: ["", "", "", ""],
    view: [
      "목업은 실제 화면과 유사한 동적인 형태의 모형이다",
      "와이어프레임을 통해 정보의 시각적인 구조를 이해할 수 있다면 프로토타입을 통해 인터페이스의 상호 작용을 시뮬레이션 할 수 있다.",
      "프로토타입에는 페이퍼 프로토타입과 디지털 프로토타입이 있다.",
      "와이어프레임은 기획 초기 단계에 사용된다",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "사용자 인터페이스는 사용자와 시스템 간의 상호 작용이 원할하게 수행되도록 도와주는 연계 작업이다. 다음중 사용자 인터페이스의 설계툴이 아닌것은?",
    problem2: ["", "", "", ""],
    view: ["스케치", "프로토나우", "아파치", "발사믹 목업"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "사용자의 요구사항을 조사하기 위한 인터뷰 진행시 유의사항으로 틀린것은?",
    problem2: ["", "", "", ""],
    view: [
      "인터뷰는 실사용자들 대상으로 진행해야한다.",
      "사용자들의 요구사항이나 불편사항등을 파악하기위해 사용자 리서치를 먼저 수행한 후 사용자 인터뷰를 진행한다.",
      "가능한 많은 사람들을 인터뷰하여 다양한 의견을 수렴하되,다수의 의견으로 인해 개인의 중요한 의견을 놓치지 않도록 주의해야한다.",
      "인터뷰 진행한 후 사용자들의 의견이 수렴된 비즈니스 요구사항을 정의해야한다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "사용자 인터페이스 설계 시 주의할 사항이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "컴퓨터의 사용 환경을 고려하여 설계한다.",
      "오류 발생시 사용자가 쉽게 인지할 수 있도록 설계한다.",
      "초보자가 쉽게 사용 할 수 있도록 CLI방식으로 설계한다.",
      "실사용자에 대한 이해를 바탕으로 설계한다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "ISO/IEC 9126은 국제적으로 소프트웨어 제품의 품질을 측정하는데 이용되고 있다. 다음 중 ISO/IEC 9126에서 정의한 소프트웨어의 품질 특성이 아닌것은?",
    problem2: ["", "", "", ""],
    view: ["유지 보수성", "사용성", "기능성", "가시성"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음 사용자 인터뷰는 ISO/IEC 9126의 품질 특성 중 어떤 특성에 가장 적합한가?",
    problem2: [
      "컴퓨터가 다운되면 20초 내에 정상적으로 작동되도록 해주시고,제가 자리를 비울 경우 다른 사람이 이 컴퓨터를 할 수 없게 해주세요.",
      "",
      "",
      "",
    ],
    view: [
      "효율성,신뢰성",
      "기능성,신뢰성",
      "기능성,유지보수성",
      "사용성,이식성",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "ISO/IEC 9126에 규정된 품질의 주 특성과 부특성간의 연결이 잘못 된것은?",
    problem2: ["", "", "", ""],
    view: [
      "Maintainability-Textability",
      "Usability-Stability",
      "Functionality-Accuracy",
      "Reliability-Fault Tolerance",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "UI 프로토타입에 대한 설명으로 가장 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "실제 구현된 것처럼 만든 동적인 형태의 모형이다.",
      "프로토타입을 작성하면 사용자를 설득하고 이해시키기 쉽다.",
      "프로토타입은 사용자의 요구사항이 모두 반영될 때까지 계속하여 개선되고 보완해야 한다.",
      "프로토타입은 될 수 있으면 정교하게 만들어야한다.",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "사용자를 이해시키기 위해 UI 프로토타입을 작성하려고 한다. 다음설명중에 틀린것은?",
    problem2: ["", "", "", ""],
    view: [
      "개발툴,테스트툴,빌드및배포툴,형상 관리 등 프로토타입 개발에 필요한 황경을 마련해야한다.",
      "프로토타입을 작성하면서 가장 많은 시간이 소요된 구간을 찾고 그 해결방법을 실제 프로젝트에 적용하면 많은 시간을 절약할 수 있다.",
      "프로토타입으로 검증할 범위는 많은 내용을 포함할 수 있도록 가급적 넓게 잡는 것이 좋다.",
      "프로토타입을 시연할 떄는 프로토타입의 개발목적을 구체적으로 설명해야 한다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 UI 설계서에 대한 설명으로 틀린것은?",
    problem2: ["", "", "", ""],
    view: [
      "UI설계서는 사용자의 요구사항을 바탕으로 UI설계를 구체화한 문서이다.",
      "UI설계서는 상세 설계이후에 작성한다.",
      "UI설계서는 개정이력,요구사항정의서,시스템구조,사이트맵,프로세스정의서,화면설계등으로 구성된다.",
      "사이트맵을 통해 사이트의 전체 구조를 한눈에 알아볼 수 있다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 아키텍처 설계에 있어서 정보 은폐의 근본적인 목적은?",
    problem2: [
      "코드를 개선하기 위하여",
      "코드의 길이를 짧게 하기 위해서",
      "고려되지않은 영향들을 최소화 하기 위하여",
      "인터페이스를 최소화하기 위하여",
    ],
    view: ["", "", "", ""],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "추상화의 유형에서 이벤트 발생의 구체적인 절차 또는 방법을 정의하지 않고 대표할 수 있는 표현으로 대체하는 것을 무엇이라고 하는가?",
    problem2: ["", "", "", ""],
    view: ["과정 추상화", "데이터 추상화", "제어 추상화", "이벤트 추상화"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 아키텍처 설계에 대한 설명으로 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "이해 관계자들의 의사소통 도구로 활용된다",
      "설계된 모듈을 프로그래밍 언어를 통해 구현된다",
      "애플리케이션을 모듈로 분할하고 모듈간 인터페이스 를 결정하는 과정이다",
      "기본원리에는 모듈화 추상화 단계적분해,정보은닉이 있다.",
    ],
    solution: "2",
    memo: "2번은 아키텍처 구현에 관한 설명이다.",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 아키텍처 품질 속성 중 다음 설명이 의미하는 것은?",
    problem2: [
      "개발 비용을 더 투자하여 유연성이 높은 아키텍처를 만들 것인지를 결정하는 것이다.",
      "유연성이 떨어지는 경우 유지보수에 많은 비용이 소모될 수 있다는 것을 고려해야한다.",
      "",
      "",
    ],
    view: ["비용과 혜택", "시장 적시성", "가용성", "구축 가능성"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 아키텍처의 설계 과정을 순서대로 가장 옳게 나열한것은?",
    problem2: [
      "가.시스템과 서브시스템의 타입을 결정한다.",
      "나.서브시스템의 기능과 서브시스템간의 인터페이스를 정의한다.",
      "다.표준 아키텍처를 설계한다.",
      "라.요구사항을 분석하여 전체 시스템의 설계 목표를 설정한다.",
    ],
    view: ["라-가-나-다", "라-나-가-다", "라-다-가-나", "라-가-다-나"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음 그림은 MVC 아키텍처 패턴을 나타낸 것이며,세가지 요소가 별도로 컴포넌트로 구성된다. 각 가,나,다에 해당되는 요소들은?",
    problem2: [
      "input ->(가)-갱신->(나)",
      "(가)-제어->(다)",
      "(다)-정보요청->(나),(나)-변경알림->(다)",
      "(다)->output",
    ],
    view: [
      "가-컨트롤러,나-모델,다-뷰",
      "가-모델,나-뷰,다-컨트롤러",
      "가-뷰,나-모델,다-컨트롤러",
      "가-컨트롤러,나-뷰,다-모델",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "아키텍처의 패턴에 관한 설명중 가장 옳지 않은것은?",
    problem2: ["", "", "", ""],
    view: [
      "레이어 패턴은 하위 계층이 제공하는 서비스 상위계층의 서브시스템이 사용하도록 구성된다.",
      "브로커 패턴은 사용자가 원하는 서비스와 특성을 요청하면,적합환 컴포넌트를 연결해준다.",
      "이벤트-버스 패턴은 이벤트 메시지를 발행하고 구독하는 형태로 이루어진다.",
      "피어-투-피어 패턴에서 각 서브시스템은 서비스 요청하고 제공하는 능력이 있다.",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음은 아키텍처 스타일과 이를 기반으로 하는 시스템의 관계를 짝지은 것으로 가장 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "Layer Pattern - OSI 참조모델",
      "Master-Slave Pattern - 장애 허용 시스템",
      "Blackboard Pattern - 차량 식별 시스템",
      "MVC Pattern - 병렬 컴퓨팅 시스템",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "아키텍처 패턴의 장점에 해당하지 않는 것은?",
    problem2: ["", "", "", ""],
    view: [
      "시행착오를 줄여 개발 시간이 최대화되고,고품질의 소프트웨어를 생산할 수 있다.",
      "전형적인 아키텍처를 기반으로 이해를 공유하여 개발자들 간의 의사소통이 간편해진다.",
      "개발에 참여하지 않아도 시스템의 이해가 쉬어 유지보수가 용이하다.",
      "시스템 개발 전에 시스템 특성을 예측할 수 있다.",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음이 설명하고 있는 아키텍처 패턴은?",
    problem2: [
      "데이터 변환 시스템과 같이 데이터 스트림을 처리해야하는 소프트웨어에서 주로 사용된다.",
      "한 모듈이 데이터 스트림을 입력받아 처리하면 다음 모듈이 결과를 이어받아 처리하는 형식이다.",
      "모듈의 재사용과 추가가 간편하여 확장성이 뛰어나다.",
      "",
    ],
    view: [
      "MVC Pattern",
      "Pipe-Filter Pattern",
      "Pear-To-Pear Parttern",
      "Broker Pattern",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "객체지향 프로그램의 장점으로 거리가 먼 것은?",
    problem2: ["", "", "", ""],
    view: [
      "자연적인 모델링이 가능하다.",
      "실행속도가 빨라진다.",
      "소프트웨어의 재사용률이 높아진다.",
      "소프트웨어의 유지보수성이 햐상 된다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "객체에 대한 특성을 설명한 것으로 가장 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "객체마다 각각의 상태를 갖고 있다.",
      "식별성을 가진다",
      "행위에 대하여 그 특징을 나타낼 수 있다.",
      "일정한 기억장소를 가지고 있지 않다.",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "객체지향 개념 중 하나 이상의 유사한 객체들을 묶어 고통된 특성을 표현한 데이터 추상화를 의미하는 것은?",
    problem2: ["", "", "", ""],
    view: ["메소드", "클래스", "상속성", "추상화"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "객체지향 개념에서 연관된 데이터와 함수를 함께 묶어 외부와 경계를 만들고 필요한 인터페이스만을 밖으로 드러내는 과정을 무엇이라고 하는가?",
    problem2: ["", "", "", ""],
    view: ["정보 은닉", "클래스", "캡슐화", "통합"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "객체 지향 기법에서 상속의 결과로 얻을 수 있는 가장 주요한 이점은?",
    problem2: ["", "", "", ""],
    view: [
      "모듈 라이브러리의 재이용",
      "객체지향 DB를 사용할 수 있는 능력",
      "클래스와 오브젝트들을 재사용할 수 있는 능력",
      "프로젝트들을 보다 효과적으로 관리할 수 있는 능력",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "ASCII File을 Print 하는 method를 갖고 있는 object Binary File을 print하는 method를 갖고 있는 object,Picture File을 print 하는 method를 갖고 있는 object들은 모두 print란 메시지를 받으면 수행하게 된다. 그러나 각각의 method에서 print를 수행하는 방법은 모두 다를 것이다. 객체지향 시스템에서 이와 같이 서로 다른 Class들이 같은 의미의 응답을 하는 특성을 무엇이라고 하는가.",
    problem2: ["", "", "", ""],
    view: ["캡슐화", "상속성", "다형성", "추상화"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 참고하는 경우 이를 무슨 결합이라고 하는가?",
    problem2: ["", "", "", ""],
    view: ["내용 결합", "제어 결합", "공통 결합", "스템프 결합"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "두 모듈이 동일한 자료 구조를 조회하는 경우의 결합성이며 자료 구조의 어떠한 변화,즉 퐷이나 구조의 변화는 그것을 조회하는 모든 모듈 및 변화되는 필드를 실제로 조회하지 않는 모듈에 까지도 영향을 미치게 되는 결합성은",
    problem2: ["", "", "", ""],
    view: [
      "Data Coupling",
      "Stamp Coupling",
      "Control Coupling",
      "Content Coupling",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "결합도에 대한 설명으로 틀린 것은?",
    problem2: ["", "", "", ""],
    view: [
      "데이터 결합도는 두 모듈이 매개변수로 자료를 전달할 때 자료구조 형태로 전달되어 이용될 때 데이터가 결합되어 있다고 한다.",
      "내용 결합도는 하나의 모듈이 직접적으로 다른 모듈의 내용을 참조할 때 두모듈은 내용적으로 결합되어 있다고 한다.",
      "공통 결합도는 두모듈이 동일한 전역 데이터를 접근한다면 공통 결합되어 있다고 한다.",
      "결합도는 두모듈간의 상호작용,또는 의존도 정도를 나타내는 것이다.",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "모듈의 응집도에 대한 설명 중 틀린 것은?",
    problem2: ["", "", "", ""],
    view: [
      "모듈의 응집도란 모듈 안의 요소들이 서로 관련되어 있는 정도를 말한다.",
      "기능적 응집도는 한 모듈 내부의 한 기능 요소에 의한 출력 자료가 다음 기능 요소의 입력 자료로서 제공되는 형태이다",
      "교환적 응집도는 동일한 입력과 출력을 사용하는 소작업들이 모인 모듈에서 볼 수 있다.",
      "논리적 응집도는 유사한 성격을 갖거나 특정형태로 분류되는 처리 요소들로 하나의 모듈이 형성 되는 경우이다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "응집도 종류 중 서로 간에 어떠한 의미 있는 연관관계도 지나지 않은 기능 요소로 구성되는 경우이며,서로 다른 상위 모듈에 의해 호출되어 처리상의 연관성이 없는 서로 다른 기능을 수행하는 경우의 응집도는?",
    problem2: ["", "", "", ""],
    view: [
      "Coincidental Cohesion",
      "Functional Cohesion",
      "Sequential Cohesion",
      "Logical Cohesion",
    ],
    solution: "",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "모듈을 설계하기 위해서 바람직한 응집도와 결합도의 관계는?",
    problem2: ["", "", "", ""],
    view: [
      "응집도는 약하고 결합도는 강해야한다",
      "응집도는 강하고 결합도는 약해야한다",
      "응집도도 약하고 결합도도 약해야한다",
      "응집도도 강하고 결합도도 강해야한다",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음은 소프트웨어의 구성요소인 모듈의 계층적 구성을 나타내는 프로그램 구조도 이다. 모듈 G에서의 패인 과 팬 아웃은?",
    problem2: [
      "a->b,a->c,a->d",
      "b->(e,f),c->(e,f,g),d->g",
      "e->h,f->(h,i),g->i",
      "",
    ],
    view: [
      "팬인:1 팬아웃:2",
      "팬인:2 팬아웃:1",
      "팬인:2 팬아웃:3",
      "팬인:3 팬아웃:1",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "효과적인 모듈 설계 방법으로 가장 거리가 먼 것은?",
    problem2: ["", "", "", ""],
    view: [
      "coupling은 약하게 cohension는 강하게 설정한다.",
      "complexity는 줄이고 redundancy를 최대한 늘릴 수 있도록 설계한다.",
      "Maintenance가 용이하도록 설계한다.",
      "module 크기는 시스템의 전반적인 기능과 구조를 이해하기 쉬운 크기로 설계한다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "소프트웨어 재사용에 대한 내용중 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "비용을 절감하고 개발 시간을 단축하여 생산성이 증가한다.",
      "재사용되는 대상은 외부 모듈과의 결합도가 낮아야한다.",
      "규모에 따라 변수,함수,객체,컴포넌트 단위로 재사용한다.",
      "재사용을 위해서는 사용법이 공개되어야한다.",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "공통 모듈을 설계할 때 공통 부분을 명세하기 이한 기법에 해당하지 않는 것은?",
    problem2: ["", "", "", ""],
    view: ["독립성", "명확성", "일관성", "정확성"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "코드화 대상 항목을 10진 분할하고, 다시 그 각각에 대하여 10진 분할하는 방법을 필요한 만큼 반복하는 코드로서,코드 대상 항목의 추가가 용이하며 무제한적으로 확대할 수 있으나 자릿수가 길어질 수 있고 기계 처리에는 적합하지 않은 코드는?",
    problem2: ["", "", "", ""],
    view: [
      "Sequence Code",
      "Group Classification Code",
      "Block Code",
      "Decimal Code",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음과 같이 주로 도서분류 코드에사용되는 코드는?",
    problem2: [
      "도서 목록 : 국문학 , 철학 , 정보학",
      "부여 코드 : 100, 200, 300",
      "",
      "",
    ],
    view: ["10진코드", "순서 코드", "문자 코드", "분류 코드"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "코드의 종류 중 코드화 대상 항목을 자료의 발생순서, 크기순서,가나다라 순서 등과 같이 어떤 일정한 기준에 따라 일련번호를 부여하는 것은?",
    problem2: ["", "", "", ""],
    view: ["block code", "group code", "sequence code", "demical code"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음과 같은 표현 방법으로 부여하는 코드는?",
    problem2: [
      "제품: 냉장고,형강등,텔레비전(17인치),텔레비전(25인치)",
      "부여코드: RF-235,K-30-220-W,T-17,T-25-C",
      "",
      "",
    ],
    view: [
      "seqeunce code",
      "Mnemonic Code",
      "block code",
      "group classification code",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "관찰 대상의 데이터가 변화하면 이를 탐지하여 여러가지 방식으로 사용자에게 출력하는 프로그램을 작성하고자 한다. 이프로그램에 적용 가능한 디자인 패턴은?",
    problem2: ["", "", "", ""],
    view: ["Composite 패턴", "Facade패턴", "Bridge패턴", "Observer 패턴"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음 중 복잡한 서브 클래스들을 피해 더 상위에 인터페이스를 구성함으로써 서브 클래스 들의 기능을 간편하게 사용할수 있도록하는 패턴은?",
    problem2: ["", "", "", ""],
    view: [
      "Abstract Factory 패턴",
      "Facade 패턴",
      "Singleton 패턴",
      "Interpreter 패턴",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 디자인 패턴에 대한 설명으로 가장 옳지 않은 것은?",
    problem2: ["", "", "", ""],
    view: [
      "singleton : 하나의 객체를 생성하여 해당 객체를 어디서든 참조할 수 있도록 한다.",
      "bridge : 구현에서 추상을 분리하여 독립적으로 다양성을 가질 수 있다.",
      "Chain of Responsibility 한 객체가 처리하지 못한 요청을 다음 객체가 처리하는 형태이다.",
      "Strategy : 알고리즘 하나로 캡슐화하여 원하는 알고리즘의 선택이 가능하지만,알고리즘의 변경이 미치는 영향이 크다.",
    ],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "차량 네비게이션소프트웨어에서 GPS수신하는 경우와 수신하지 못하는 경우에 따라 차량 위치를 구하는 다른 알고리즘을 선택하고자 할 때 가장 적합한 설계 패턴은?",
    problem2: ["", "", "", ""],
    view: ["데코레이터 패턴", "전략패턴", "어댑터패턴", "플라이웨이트패턴"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음중 성격이 다른 설계 패턴",
    problem2: ["", "", "", ""],
    view: ["상태패턴", "전략패턴", "메멘토패턴", "컴포지트패턴"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "상속을 사용하지 않고도 객체의 기능을 동적으로 확장할 수 있도록 해주는 설계 패턴은?",
    problem2: ["", "", "", ""],
    view: ["데코레이터패턴", "프록시패턴", "빌더패턴", "커맨드패턴"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "여러 객체들이 서로 메시지를 주고받는 상호작용을 특정 객체안에 캡슐화하여 서로의 존재를 모르는 상태에서도 메시지를 주고 받으며 협력할 수 있도록 하는 설계 패턴은?",
    problem2: ["", "", "", ""],
    view: ["Template Method", "Mediator", "Visitor", "Bridge"],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 인터페이스 요구사항에 대한 설명으로 틀린 것은?",
    problem2: ["", "", "", ""],
    view: [
      "인터페이스 요구사항은 목표 시스템과 외부시스템을 연동하는데 필요한 인터페이스에 대한 요구사항을 기술한 것이다.",
      "인터페이스 요구사항의 인터페이스 이름은 보안을 위해 사람들이 이해하기 어려운 이름으로 지정한다.",
      "인터페이스 요구사항의 인터페이스 전송 주기는 수시,매일,주1회등으로 지정한다.",
      "인터페이스 요구사항에 인터페이스 관련 담당자도 명시해야된다.",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "다음중 시스템 인터페이스 요구사항 명세서 작성 시 포함되는 항목이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "인터페이스 이름",
      "연계 범위 및 내용",
      "송,수신 데이터",
      "인터페이스 주기",
    ],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "시스템 인터페이스 관련 요구사항 중 기능적 요구사항이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: [
      "은행 자금 관리 서비스 연동",
      "대 내외 인터페이스 구현방안",
      "인사 및 조직 정보 연계",
      "고객 대상 채널 업무 연계 기능 구현",
    ],
    solution: "2",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 요구사항 검토 방법이 아닌 것은?",
    problem2: ["", "", "", ""],
    view: ["개발자 검토", "인스펙션", "워크크루", "동료검토"],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음중 인터페이스 요구사항 검증 항목에 포함되지 않는 것",
    problem2: ["", "", "", ""],
    view: ["명확성", "일관성", "변경 용이성", "가용성"],
    solution: "4",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "요구사항 명세서 작성자가 명세서의 내용을 직접 설명하고 이해관계자들이 이를 들으면서 결함을 발견하는 형태로 진행하는 요구사항 검토 방법은?",
    problem2: ["", "", "", ""],
    view: ["워크스루", "인스펙션", "동료검토", "개발자검토"],
    solution: "3",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem: "다음 중 송,수신 데이터 식별 시 해당하는 데이터 종류가 아닌것은?",
    problem2: ["", "", "", ""],
    view: [
      "오류 식별 항목",
      "공통코드",
      "인터페이스 표준 항목",
      "송수신데이터항목",
    ],
    solution: "1",
    memo: "",
  },
  {
    category: "SoftwareDesign",
    problem:
      "인터페이스 처리 유형 중 데이터를 매건 단위로 처리할 경우 비용이 많이 발생할 때 사용하는 방식은?",
    problem2: ["", "", "", ""],
    view: ["실시간방식", "지연처리방식", "일괄처리방식", "배치방식"],
    solution: "2",
    memo: "",
  },
];
